@page "/"
@inject Microsoft.AspNetCore.Components.WebAssembly.Hosting.IWebAssemblyHostEnvironment Env
@inject Grpc.Net.Client.GrpcChannel Channel
@using Google.Protobuf.WellKnownTypes
@using Weather

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
<button style="margin-bottom:10px" class="btn btn-info" @onclick="OnFetchApi">Fetch data From Api</button>
<br />
<button class="btn btn-primary" @onclick="OnFetchGrpc">Fetch data From Grpc</button>
@if (forecasts == null)
{
    <p><em>Please Click any one</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private IList<WeatherForecastVM> forecasts = default!;
    private HttpClient httpClient = default!;
    protected override async Task OnInitializedAsync()
    {
        forecasts = null;
        httpClient = new HttpClient()
        {
            BaseAddress = new Uri(Env.BaseAddress)
        };
    }

    private async Task OnFetchApi()
    {
        forecasts = await httpClient.GetFromJsonAsync<WeatherForecastVM[]>("/weatherforecast?returnCount=" + 100);
    }

    private async Task OnFetchGrpc()
    {
        var client = new WeatherForecasts.WeatherForecastsClient(Channel);
        forecasts = (await client.GetWeatherForecastsAsync(new GetWeatherForecastsRequest { ReturnCount = 100 })).Forecasts.Select(_ => new WeatherForecastVM
        {
            Date = _.Date.ToDateTime(),
            Summary = _.Summary,
            TemperatureC = _.TemperatureC
        }).ToList();
    }

    public class WeatherForecastVM
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public string Summary { get; set; }
    }
}
